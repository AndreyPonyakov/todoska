//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TodoSystem.UI.Model.TodoControllerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Todo", Namespace="http://schemas.datacontract.org/2004/07/TodoSystem.Service.Model.Interface")]
    [System.SerializableAttribute()]
    public partial class Todo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CheckedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DeadlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Checked {
            get {
                return this.CheckedField;
            }
            set {
                if ((this.CheckedField.Equals(value) != true)) {
                    this.CheckedField = value;
                    this.RaisePropertyChanged("Checked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Deadline {
            get {
                return this.DeadlineField;
            }
            set {
                if ((this.DeadlineField.Equals(value) != true)) {
                    this.DeadlineField = value;
                    this.RaisePropertyChanged("Deadline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoControllerServiceReference.ITodoController")]
    public interface ITodoController {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectAll", ReplyAction="http://tempuri.org/ITodoController/SelectAllResponse")]
        TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectAll", ReplyAction="http://tempuri.org/ITodoController/SelectAllResponse")]
        System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectById", ReplyAction="http://tempuri.org/ITodoController/SelectByIdResponse")]
        TodoSystem.UI.Model.TodoControllerServiceReference.Todo SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectById", ReplyAction="http://tempuri.org/ITodoController/SelectByIdResponse")]
        System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo> SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectByTitle", ReplyAction="http://tempuri.org/ITodoController/SelectByTitleResponse")]
        TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectByTitle", ReplyAction="http://tempuri.org/ITodoController/SelectByTitleResponse")]
        System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectByTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectByCategory", ReplyAction="http://tempuri.org/ITodoController/SelectByCategoryResponse")]
        TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectByCategory(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SelectByCategory", ReplyAction="http://tempuri.org/ITodoController/SelectByCategoryResponse")]
        System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectByCategoryAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Create", ReplyAction="http://tempuri.org/ITodoController/CreateResponse")]
        TodoSystem.UI.Model.TodoControllerServiceReference.Todo Create(string title, string desc, System.Nullable<System.DateTime> deadline, int categoryId, int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Create", ReplyAction="http://tempuri.org/ITodoController/CreateResponse")]
        System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo> CreateAsync(string title, string desc, System.Nullable<System.DateTime> deadline, int categoryId, int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Update", ReplyAction="http://tempuri.org/ITodoController/UpdateResponse")]
        void Update(TodoSystem.UI.Model.TodoControllerServiceReference.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Update", ReplyAction="http://tempuri.org/ITodoController/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(TodoSystem.UI.Model.TodoControllerServiceReference.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Delete", ReplyAction="http://tempuri.org/ITodoController/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Delete", ReplyAction="http://tempuri.org/ITodoController/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/ChangeOrder", ReplyAction="http://tempuri.org/ITodoController/ChangeOrderResponse")]
        void ChangeOrder(int id, int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/ChangeOrder", ReplyAction="http://tempuri.org/ITodoController/ChangeOrderResponse")]
        System.Threading.Tasks.Task ChangeOrderAsync(int id, int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Check", ReplyAction="http://tempuri.org/ITodoController/CheckResponse")]
        void Check(int id, bool isChecked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/Check", ReplyAction="http://tempuri.org/ITodoController/CheckResponse")]
        System.Threading.Tasks.Task CheckAsync(int id, bool isChecked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SetCategory", ReplyAction="http://tempuri.org/ITodoController/SetCategoryResponse")]
        void SetCategory(int id, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SetCategory", ReplyAction="http://tempuri.org/ITodoController/SetCategoryResponse")]
        System.Threading.Tasks.Task SetCategoryAsync(int id, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SetDeadline", ReplyAction="http://tempuri.org/ITodoController/SetDeadlineResponse")]
        void SetDeadline(int id, System.Nullable<System.DateTime> deadline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoController/SetDeadline", ReplyAction="http://tempuri.org/ITodoController/SetDeadlineResponse")]
        System.Threading.Tasks.Task SetDeadlineAsync(int id, System.Nullable<System.DateTime> deadline);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoControllerChannel : TodoSystem.UI.Model.TodoControllerServiceReference.ITodoController, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoControllerClient : System.ServiceModel.ClientBase<TodoSystem.UI.Model.TodoControllerServiceReference.ITodoController>, TodoSystem.UI.Model.TodoControllerServiceReference.ITodoController {
        
        public TodoControllerClient() {
        }
        
        public TodoControllerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoControllerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoControllerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoControllerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public TodoSystem.UI.Model.TodoControllerServiceReference.Todo SelectById(int id) {
            return base.Channel.SelectById(id);
        }
        
        public System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo> SelectByIdAsync(int id) {
            return base.Channel.SelectByIdAsync(id);
        }
        
        public TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectByTitle(string title) {
            return base.Channel.SelectByTitle(title);
        }
        
        public System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectByTitleAsync(string title) {
            return base.Channel.SelectByTitleAsync(title);
        }
        
        public TodoSystem.UI.Model.TodoControllerServiceReference.Todo[] SelectByCategory(int categoryId) {
            return base.Channel.SelectByCategory(categoryId);
        }
        
        public System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo[]> SelectByCategoryAsync(int categoryId) {
            return base.Channel.SelectByCategoryAsync(categoryId);
        }
        
        public TodoSystem.UI.Model.TodoControllerServiceReference.Todo Create(string title, string desc, System.Nullable<System.DateTime> deadline, int categoryId, int order) {
            return base.Channel.Create(title, desc, deadline, categoryId, order);
        }
        
        public System.Threading.Tasks.Task<TodoSystem.UI.Model.TodoControllerServiceReference.Todo> CreateAsync(string title, string desc, System.Nullable<System.DateTime> deadline, int categoryId, int order) {
            return base.Channel.CreateAsync(title, desc, deadline, categoryId, order);
        }
        
        public void Update(TodoSystem.UI.Model.TodoControllerServiceReference.Todo todo) {
            base.Channel.Update(todo);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(TodoSystem.UI.Model.TodoControllerServiceReference.Todo todo) {
            return base.Channel.UpdateAsync(todo);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void ChangeOrder(int id, int order) {
            base.Channel.ChangeOrder(id, order);
        }
        
        public System.Threading.Tasks.Task ChangeOrderAsync(int id, int order) {
            return base.Channel.ChangeOrderAsync(id, order);
        }
        
        public void Check(int id, bool isChecked) {
            base.Channel.Check(id, isChecked);
        }
        
        public System.Threading.Tasks.Task CheckAsync(int id, bool isChecked) {
            return base.Channel.CheckAsync(id, isChecked);
        }
        
        public void SetCategory(int id, int categoryId) {
            base.Channel.SetCategory(id, categoryId);
        }
        
        public System.Threading.Tasks.Task SetCategoryAsync(int id, int categoryId) {
            return base.Channel.SetCategoryAsync(id, categoryId);
        }
        
        public void SetDeadline(int id, System.Nullable<System.DateTime> deadline) {
            base.Channel.SetDeadline(id, deadline);
        }
        
        public System.Threading.Tasks.Task SetDeadlineAsync(int id, System.Nullable<System.DateTime> deadline) {
            return base.Channel.SetDeadlineAsync(id, deadline);
        }
    }
}
